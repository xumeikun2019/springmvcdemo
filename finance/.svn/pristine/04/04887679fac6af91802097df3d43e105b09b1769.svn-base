package com.cf.project.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import com.sun.jndi.toolkit.url.UrlUtil;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.cf.project.service.SysDepartmentService;
import com.cf.project.service.WxRequestService;
import com.cf.util.JsonResult;
import com.cf.util.MD5;
import com.cf.util.SendUtil;

@RestController
@RequestMapping("/wxRequest")
public class WxRequestController {

	@Autowired
	SysDepartmentService sysDepartmentService;
	
	@Autowired
	WxRequestService wxRequestService;

	@GetMapping("/getDepartment")
	public JsonResult getDepartment(ModelMap map) {

		JsonResult jsonResult = new JsonResult();
		try {
			jsonResult = sysDepartmentService.findSysDepartmentOne();

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("调用成功");

		return jsonResult;

	}

	@GetMapping("/getDepartmentTwo")
	public JsonResult getDepartmentTwo(String id) {

		JsonResult jsonResult = new JsonResult();
		try {
			jsonResult = sysDepartmentService.findSysDepartmentTwo(id);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("调用成功");

		return jsonResult;

	}

	@GetMapping("/getDepartmentUser")
	public JsonResult getDepartmentUser(String id) {

		JsonResult jsonResult = new JsonResult();
		try {
			jsonResult = sysDepartmentService.findSysDepartmentUser(id);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("调用成功");

		return jsonResult;

	}

	@PostMapping("/saveVisitors")
	public JsonResult saveVisitors(@RequestParam Map<String, Object> map) {

		JsonResult jsonResult = new JsonResult();
		try {
			jsonResult = sysDepartmentService.saveVisitors(map);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("调用成功");

		return jsonResult;

	}

	@GetMapping("/findVisits")
	public JsonResult findVisits(String weid) {

		JsonResult jsonResult = new JsonResult();
		try {
			jsonResult = sysDepartmentService.findVisits(weid);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("调用成功");

		return jsonResult;

	}

	public static String sendPost(String url, Map<String, String> paramMap) {
		PrintWriter out = null;
		BufferedReader in = null;
		String result = "";
		String param = "";
		Iterator<String> it = paramMap.keySet().iterator();
		while (it.hasNext()) {
			String key = it.next();
			param += key + "=" + paramMap.get(key) + "&";
		}
		param = param.substring(0, param.length() - 1);
		try {
			URL realUrl = new URL(url);
			// 打开和URL之间的连接
			URLConnection conn = realUrl.openConnection();
			// 设置通用的请求属性
			conn.setRequestProperty("accept", "*/*");
			conn.setRequestProperty("connection", "Keep-Alive");
			conn.setRequestProperty("Accept-Charset", "utf-8");
			conn.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");
			// 发送POST请求必须设置如下两行
			conn.setDoOutput(true);
			conn.setDoInput(true);
			// 获取URLConnection对象对应的输出流
			out = new PrintWriter(conn.getOutputStream());
			// 发送请求参数
			out.print(param);
			// flush输出流的缓冲
			out.flush();
			// 定义BufferedReader输入流来读取URL的响应
			in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
			String line;
			while ((line = in.readLine()) != null) {
				result += line;
			}
		} catch (Exception e) {

		}
		// 使用finally块来关闭输出流、输入流
		finally {
			try {
				if (out != null) {
					out.close();
				}
				if (in != null) {
					in.close();
				}
			} catch (IOException ex) {
				ex.printStackTrace();
			}
		}
		return result;
	}

	/**
	 * 根据小程序传来的code 返回openID
	 * @param code
	 * @return
	 */
	@GetMapping(value = "/login")
	public static JSONObject getSessionKeyOropenid(String code) {
	Map<String, String> requestUrlParam = new HashMap<String, String>();
		requestUrlParam.put("appid", "wxf6895363b78538f5"); // 开发者设置中的appId  
		requestUrlParam.put("secret", "309e638b48c60d5a886d5ee2a33e7398"); // 开发者设置中的appSecret  
		requestUrlParam.put("js_code", code); // 小程序调用wx.login返回的code  
		requestUrlParam.put("grant_type", "authorization_code");// 默认参数 
		JSONObject jsonObject = JSON
				.parseObject(sendPost("https://api.weixin.qq.com/sns/jscode2session", requestUrlParam));
		return jsonObject;
	}
	
	/**
	 * 发送模板消息
	 * @param openId 
	 * @param formId
	 * @param title
	 * @param content
	 * @return
	 */
	@GetMapping(value = "/send")
	public static boolean send(String openId, String formId, String title,String content) {
		System.out.println(openId);
		SendUtil sendUtil = new SendUtil();
		boolean result = sendUtil.pushNoticeUtil(openId, formId, title, content);	
		
		return result;
	}
	
	@GetMapping(value = "/sign")
	public Boolean sign( String user, String pwd, String openId) {
		
		Boolean sign  = false;
		try {
			sign = wxRequestService.sign(user,pwd,openId);
			return sign;
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		System.out.println(openId);
		return sign;
		
	}
	
}
