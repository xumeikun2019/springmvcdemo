package com.cf.project.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cf.project.Constants;
import com.cf.project.annotation.Cache;
import com.cf.project.annotation.CacheClear;
import com.cf.project.mybatis.dao.CDeviceMapper;
import com.cf.project.mybatis.model.CDevice;
import com.cf.project.service.CDeviceService;
import com.cf.util.DateTimeUtil;
import com.cf.util.EntyPage;
import com.cf.util.JsonListResult;
import com.cf.util.JsonResult;

@Service
public class CDeviceServiceImpl implements CDeviceService {
	@Autowired
	private CDeviceMapper cDeviceMapper;

	@Cache
	public JsonListResult findCDeviceList(Map<String, Object> map) throws Exception {
		List<Map<String, Object>> list = cDeviceMapper.findByHDPage(map);
		EntyPage page = (EntyPage) map.get("page");
		JsonListResult jsonResult = new JsonListResult(page, list);
		return jsonResult;
	}

	@Cache
	public CDevice findCDeviceListById(String id) throws Exception {
		return this.cDeviceMapper.selectByPrimaryKey(id);
	}

	@CacheClear
	public JsonResult saveOrUpdate(CDevice pojo) throws Exception {
		JsonResult jsonResult = new JsonResult();
		if (pojo != null) {
			String id = pojo.getId();
			int result = 0;
			Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
			if (StringUtils.isNotBlank(id)) {
				pojo.setLastTime(dateTime);
				result = cDeviceMapper.updateByPrimaryKeySelective(pojo);
			} else {
				pojo.setAddTime(dateTime);
				pojo.setLastTime(dateTime);
				result = cDeviceMapper.insertSelective(pojo);
			}
			if (result == 0) {
				jsonResult.setResult(Constants.OPERATION_FAIL);
			}
		}
		return jsonResult;
	}

	@CacheClear
	public JsonResult update(CDevice pojo) throws Exception {
		JsonResult jsonResult = new JsonResult();
		Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
		pojo.setLastTime(dateTime);
		int result = cDeviceMapper.updateByPrimaryKeySelective(pojo);
		if (result == 0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
		}
		return jsonResult;
	}
	
	@CacheClear
	@Override
	public JsonResult updateOnlineState(Map<String, Object> paramMap) throws Exception {
		JsonResult jsonResult = new JsonResult();
		Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
		paramMap.put("lastTime", dateTime);
		int result = cDeviceMapper.updateByMac(paramMap);
		if (result == 0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
		}
		return jsonResult;
	}
	
	@Override
	public JsonResult updateOnlineStateByIp(Map<String, Object> paramMap) throws Exception {
		JsonResult jsonResult = new JsonResult();
		Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
		paramMap.put("lastTime", dateTime);
		int result = cDeviceMapper.updateByIp(paramMap);
		if (result == 0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
		}
		return jsonResult;
	}

	@CacheClear
	public JsonResult del(String id) throws Exception {
		JsonResult jsonResult = new JsonResult();
		int result = 0;
		if (StringUtils.contains(id, ",")) {
			String[] idsArr = id.split(",");
			if (idsArr.length > 0) {
				for (String idArr : idsArr) {
					result = cDeviceMapper.deleteByPrimaryKey(idArr);
					if (result == 0) {
						break;
					}
				}
			}
		} else {
			result = cDeviceMapper.deleteByPrimaryKey(id);
		}
		if (result == 0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
		}
		return jsonResult;
	}

	/**
	 * 移动端设备绑定
	 * 
	 * @param
	 * @return
	 */
	@CacheClear
	public JsonResult addCDevice(Map<String, Object> map) {
		JsonResult jsonResult = new JsonResult();
		String placeId = (String) map.get("placeId");
		String mac = (String) map.get("mac");
		if (!StringUtils.isEmpty(placeId) && !StringUtils.isEmpty(mac)) {
			CDevice device = cDeviceMapper.findcDeviceBymap(map);
			if (device != null) {
				String deviceId = device.getId();
				cDeviceMapper.deleteByPrimaryKey(deviceId);
			}
			CDevice cDevice = new CDevice();
			cDevice.setPlaceId(placeId);
			cDevice.setMac(mac);
			cDevice.setState("T");
			int flag = cDeviceMapper.insertSelective(cDevice);
			if (flag > 0) {
				jsonResult.setMessage("绑定成功!");
			}
			return jsonResult;
		}
		jsonResult.setResult(Constants.OPERATION_FAIL);
		jsonResult.setMessage("绑定失败!");
		return jsonResult;
	}

	/**
	 * 根据设备id 查询设备
	 */
	@Cache
	public JsonResult findByMac(String mac) {
		JsonResult jsonResult = new JsonResult();
		if (!StringUtils.isEmpty(mac)) {
			Map<String, Object> map = cDeviceMapper.findByMac(mac);
			if (map == null) {
				jsonResult.setMessage("无此设备信息!");
				jsonResult.setResult(Constants.OPERATION_FAIL);
			}
			jsonResult.setData(map);
			return jsonResult;
		}
		jsonResult.setMessage("设备名不能为空!");
		jsonResult.setResult(Constants.OPERATION_FAIL);
		return jsonResult;
	}

	/**
	 * web端pad设备绑定
	 */
	@CacheClear
	public JsonResult addCDevice(CDevice pojo) {
		JsonResult jsonResult = new JsonResult();
		String placeId = pojo.getPlaceId();
		String mac = pojo.getMac();
		if (!StringUtils.isEmpty(placeId) && !StringUtils.isEmpty(mac)) {
			Map<String,Object> map = new HashMap<>();
			map.put("mac",mac);
			map.put("placeId",placeId);
			CDevice device = cDeviceMapper.findcDeviceBymap(map);
			if (device != null) {
				String deviceId = device.getId();
				cDeviceMapper.deleteByPrimaryKey(deviceId);
			}
			pojo.setType("pad");
			Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
			pojo.setAddTime(dateTime);
			int flag = cDeviceMapper.insertSelective(pojo);
			if (flag > 0) {
				jsonResult.setMessage("绑定成功!");
			}
			return jsonResult;
		}
		jsonResult.setResult(Constants.OPERATION_FAIL);
		jsonResult.setMessage("绑定失败!");
		return jsonResult;
	}
	
	/**
	 * pad更新设备
	 */
	@CacheClear
	public JsonResult updateCDevice(CDevice pojo) {
		JsonResult jsonResult = new JsonResult();
		pojo.setType("pad");
		Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
		pojo.setLastTime(dateTime);
		int flag = cDeviceMapper.updateByPrimaryKeySelective(pojo);
		if(flag==0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
			jsonResult.setMessage("更新失败!");
			return jsonResult;
		}
		jsonResult.setMessage("更新成功!");
		return jsonResult;
	}

	/**
	 * 添加设备
	 */
	@CacheClear
	public JsonResult addDevice(CDevice pojo) {
		JsonResult jsonResult = new JsonResult();
		String placeId = pojo.getPlaceId();
		String ip = pojo.getIp();
		if (!StringUtils.isEmpty(placeId) && !StringUtils.isEmpty(ip)) {
			Map<String,Object> map = new HashMap<>();
			map.put("ip",ip);
			CDevice device = cDeviceMapper.findcDeviceBymap(map);
			if (device != null) {
				String deviceId = device.getId();
				cDeviceMapper.deleteByPrimaryKey(deviceId);
			}
			Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
			pojo.setAddTime(dateTime);
			int flag = cDeviceMapper.insertSelective(pojo);
			if (flag > 0) {
				jsonResult.setMessage("绑定成功!");
			}
			return jsonResult;
		}
		
		
		return jsonResult;
	}

	/**
	 * 更新其他设备
	 */
	@CacheClear
	public JsonResult updateDevice(CDevice pojo) {
		JsonResult jsonResult = new JsonResult();
		Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
		pojo.setLastTime(dateTime);
		int flag = cDeviceMapper.updateByPrimaryKeySelective(pojo);
		if(flag==0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
			jsonResult.setMessage("更新失败!");
			return jsonResult;
		}
		jsonResult.setMessage("更新成功!");
		
		return jsonResult;
	}

	/**
	 * 查询楼层
	 */
	@Cache
	public List<Map<String, Object>> findCDeviceByFloor() {
		return cDeviceMapper.findCDeviceByFloor();
	}
}