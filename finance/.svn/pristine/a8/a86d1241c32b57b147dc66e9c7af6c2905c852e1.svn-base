package com.cf.project.controller;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cf.project.Constants;
import com.cf.project.mybatis.dao.CRoomDeptMapper;
import com.cf.project.mybatis.model.CPlace;
import com.cf.project.service.CPlaceService;
import com.cf.util.DateTimeUtil;
import com.cf.util.EntyPage;
import com.cf.util.GridJsonResult;
import com.cf.util.JsonResult;
import com.cf.util.SessionUtil;

@Controller
@RequestMapping("/main/place")
public class CPlaceController extends GridController {
	@Autowired
	private CPlaceService cPlaceService;
	@Autowired
	private CRoomDeptMapper cRoomDeptMapper;

	@SuppressWarnings("unchecked")
	@ResponseBody
	@RequestMapping("/list")
	public GridJsonResult listJson(@RequestParam Map<String, Object> map, EntyPage page) {
		GridJsonResult result = null;
		try {
			map.put("page", page);
			List<Map<String, Object>> list = cPlaceService.findCPlaceList(map).getList();
			result = new GridJsonResult(page);
			result.setData(list);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	@ResponseBody
	@RequestMapping("/tree")
	public JsonResult listTree(@RequestParam Map<String, Object> map) {
		JsonResult result = null;
		try {
			Map<String, Object> usermap = (Map<String, Object>) SessionUtil.getSessionAttr("user");
			String userId = (String) usermap.get("id");
			map.put("userId", userId);
			result = cPlaceService.findTreeList(map);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/eshow", method = RequestMethod.POST)
	public JsonResult editShow(String id) {
		JsonResult result = new JsonResult();
		try {
			CPlace pojo = cPlaceService.findSysDepartmentListById(id);
			List<String> nameList = cRoomDeptMapper.findSysDepartmentNameListByid(id);
			String nameString = nameList.toString();
			String subNameString = nameString.substring(1, nameString.length() - 1);
			pojo.setOrderDeptId(subNameString);
			result.setData(pojo);
		} catch (Exception e) {
			result.setResult(Constants.OPERATION_FAIL);
			e.printStackTrace();
		}
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/state/list", method = RequestMethod.GET)
	public JsonResult list(@RequestParam Map<String, Object> map) {
		JsonResult result = new JsonResult();
		try {
			map.put("parentId", "1");
			map.put("type", "pad");
			result = cPlaceService.findCPlaceCDeviceListByParentId(map);
		} catch (Exception e) {
			result.setResult(Constants.OPERATION_FAIL);
			e.printStackTrace();
		}
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/attendance/list", method = RequestMethod.GET)
	public JsonResult attendance(@RequestParam Map<String, Object> map) {
		JsonResult result = new JsonResult();
		try {
			map.put("type", "attendance");
			result = cPlaceService.findCPlaceCDeviceListByTypeParentId(map);
		} catch (Exception e) {
			result.setResult(Constants.OPERATION_FAIL);
			e.printStackTrace();
		}
		return result;
	}
	
	@ResponseBody
	@RequestMapping(value = "/adv/list", method = RequestMethod.GET)
	public JsonResult adv(@RequestParam Map<String, Object> map) {
		JsonResult result = new JsonResult();
		try {
			map.put("type", "adv");
			result = cPlaceService.findCPlaceCDeviceListByTypeParentId(map);
		} catch (Exception e) {
			result.setResult(Constants.OPERATION_FAIL);
			e.printStackTrace();
		}
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/room/list", method = RequestMethod.GET)
	public JsonResult roomState(@RequestParam Map<String, Object> map) {
		JsonResult result = new JsonResult();
		try {
			String meetingTime = (String)map.get("meetingTime");
			if (StringUtils.isBlank(meetingTime)) {
				String date = DateTimeUtil.getCurrDateStr();
				map.put("meetingTime", date);
			}
			
			result = cPlaceService.findCPlaceCroomDeptCMeetingOrderListByDeptId(map);
		} catch (Exception e) {
			result.setResult(Constants.OPERATION_FAIL);
			e.printStackTrace();
		}
		return result;
	}

	@RequestMapping(value = "/add", method = RequestMethod.GET)
	public String add(ModelMap model) {
		return "main/place/add";
	}

	@RequestMapping(value = "/edit", method = RequestMethod.GET)
	public String edit(String id, ModelMap model) {
		try {
			CPlace pojo = cPlaceService.findCPlaceListById(id);
			model.addAttribute("pojo", pojo);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "main/place/edit";
	}

	@ResponseBody
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	public JsonResult create(@RequestBody CPlace pojo) {
		JsonResult result = new JsonResult();
		try {
			result = cPlaceService.saveOrUpdate(pojo);
		} catch (Exception e) {
			result.setResult(Constants.OPERATION_FAIL);
			e.printStackTrace();
		}
		return result;
	}

	@ResponseBody
	@RequestMapping(value = "/del", method = RequestMethod.POST)
	public JsonResult del(String id) {
		JsonResult result = new JsonResult();
		try {
			result = cPlaceService.del(id);
		} catch (Exception e) {
			result.setResult(Constants.OPERATION_FAIL);
			e.printStackTrace();
		}
		return result;
	}
	/**
     * 查询人员所在楼层(id)
     */
    @ResponseBody
    @RequestMapping(value= "/findlc",method = RequestMethod.GET)
    public JsonResult findlc(String id) {
    	System.out.println("id==="+id);
    	JsonResult result = new JsonResult();
		try {
			List<Map<String,Object>> list = cPlaceService.findlc(id);
			result.setData(list);
		} catch (Exception e) {
			result.setResult(Constants.OPERATION_FAIL);
			e.printStackTrace();
		}
		return result;
    }
    
    @ResponseBody
    @RequestMapping(value= "/findmt",method = RequestMethod.GET)
    public JsonResult findFloorMeet(@RequestParam Map<String, Object> map) {
    	JsonResult result = new JsonResult();
    	try {
    		result = cPlaceService.findFloorMeet();
		} catch (Exception e) {
			result.setResult(Constants.OPERATION_FAIL);
			e.printStackTrace();
		}
    	return result;
    }
	    
}