package com.cf.project.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cf.project.Constants;
import com.cf.project.annotation.Cache;
import com.cf.project.annotation.CacheClear;
import com.cf.project.mybatis.dao.CMeetingOrderMapper;
import com.cf.project.mybatis.dao.CMeetingUserMapper;
import com.cf.project.mybatis.dao.CMeetingVerifyMapper;
import com.cf.project.mybatis.model.CMeetingOrder;
import com.cf.project.mybatis.model.CMeetingUser;
import com.cf.project.mybatis.model.CMeetingVerify;
import com.cf.project.service.CMeetingOrderService;
import com.cf.util.DateTimeUtil;
import com.cf.util.EntyPage;
import com.cf.util.JsonListResult;
import com.cf.util.JsonResult;
import com.cf.util.SessionUtil;

@SuppressWarnings("all")
@Service
public class CMeetingOrderServiceImpl implements CMeetingOrderService {
	@Autowired
	private CMeetingOrderMapper cMeetingOrderMapper;
	@Autowired
	private CMeetingUserMapper cMeetingUserMapper;
	@Autowired
	private CMeetingVerifyMapper cMeetingVerifyMapper;

	@Cache
	public JsonListResult findCMeetingOrderList(Map<String, Object> map) throws Exception {

		List<Map<String, Object>> qxlist = cMeetingOrderMapper.findqx(map.get("nameId").toString());

		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		if (qxlist.size() > 0) {
			map.put("roleId", qxlist.get(0).get("role_id"));
			if (qxlist.get(0).get("role_id").equals("6178ed4bee1e11e9833900e081bbbd32")) {// 登陆人员为部门管理员--对自己部门下的会议室申请进行审批
				list = cMeetingOrderMapper.findBybmHDPage(map);
			} else if (qxlist.get(0).get("role_id").equals("758e47ccee1e11e9833900e081bbbd32")) {// 登陆人员为会服人员(会议室管理员)--对所有经过部门管理员审批通过的会议室申请进行审批
				list = cMeetingOrderMapper.findByhfHDPage(map);
			}
		} else {// 其他人员只能查询自己的审批记录
			list = cMeetingOrderMapper.findByHDPage(map);
		}
		EntyPage page = (EntyPage) map.get("page");
		JsonListResult jsonResult = new JsonListResult(page, list);
		return jsonResult;
	}
	
	@Cache
	public JsonListResult finddbsxmorelist(Map<String, Object> map) throws Exception {

//		List<Map<String, Object>> qxlist = cMeetingOrderMapper.findqx(map.get("nameId").toString());
		List<Map<String,Object>> list = cMeetingOrderMapper.finddbsxmoreByHDPage(map);
		
		EntyPage page = (EntyPage) map.get("page");
		JsonListResult jsonResult = new JsonListResult(page, list);
		return jsonResult;
	}
	
	@Cache
	public JsonListResult findmoreCMeetingOrderList(Map<String, Object> map) throws Exception {

//		List<Map<String, Object>> qxlist = cMeetingOrderMapper.findqx(map.get("nameId").toString());
		List<Map<String,Object>> list = cMeetingOrderMapper.findmoreByHDPage(map);
		
		EntyPage page = (EntyPage) map.get("page");
		JsonListResult jsonResult = new JsonListResult(page, list);
		return jsonResult;
	}

	@Cache
	public CMeetingOrder view(String id) throws Exception {
		return this.cMeetingOrderMapper.view(id);
	}

	@Cache
	public CMeetingOrder findCMeetingOrderListById(String id) throws Exception {
		return this.cMeetingOrderMapper.selectByPrimaryKey(id);
	}

	@CacheClear
	public JsonResult sptg(CMeetingOrder pojo, String userid) throws Exception {
		Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
		int result = 0;
		JsonResult jsonResult = new JsonResult();
		CMeetingVerify pojo1 = new CMeetingVerify();
		pojo1.setMeetingId(pojo.getId());
		pojo1.setUserId(userid);
		pojo1.setState("T");
		pojo1.setAddTime(dateTime);
		pojo1.setLastTime(dateTime);
		result = cMeetingVerifyMapper.insertSelective(pojo1);
		if (pojo.getMeetingStep().equals("1")) {
			result = cMeetingOrderMapper.updatezt(pojo.getId(), "2");
		} else {
			result = cMeetingOrderMapper.updatezt(pojo.getId(), "3");
		}
		if (result == 0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
		}
		return jsonResult;
	}

	@CacheClear
	public JsonResult spbtg(CMeetingVerify pojo, String userid) throws Exception {
		JsonResult jsonResult = new JsonResult();
		if (pojo != null) {
			String id = pojo.getId();
			int result = 0;
			Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
			if (StringUtils.isNotBlank(id)) {
				pojo.setLastTime(dateTime);
				result = cMeetingVerifyMapper.updateByPrimaryKeySelective(pojo);
			} else {
				pojo.setAddTime(dateTime);
				pojo.setLastTime(dateTime);
				result = cMeetingVerifyMapper.insertSelective(pojo);
				result = cMeetingOrderMapper.updatezt(pojo.getMeetingId(), "0");
			}
			if (result == 0) {
				jsonResult.setResult(Constants.OPERATION_FAIL);
			}
		}
		return jsonResult;
	}

	@CacheClear
	public JsonResult saveOrUpdate(CMeetingOrder pojo) throws Exception {
		JsonResult jsonResult = new JsonResult();
		if (pojo != null) {
			String id = pojo.getId();
			int result = 0;
			pojo.setOrderPlaceId(pojo.getOrderPlaceId().substring(0, pojo.getOrderPlaceId().length() - 1));
			Map<String, Object> usermap = (Map<String, Object>) SessionUtil.getSessionAttr("user");
			pojo.setOrderUserId(usermap.get("id").toString());
			// 判断预约时间是否冲突
			List<Map<String, Object>> list = cMeetingOrderMapper.findtime(pojo.getTimeEnd(), pojo.getTimeStart(),
					pojo.getOrderPlaceId());
			if (list.size() > 0) {
				jsonResult.setResult(Constants.OPERATION_FAIL);
				jsonResult.setMessage("预约时间和" + list.get(0).get("meeting_name") + "有冲突!");
				return jsonResult;
			}
			Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
			if (StringUtils.isNotBlank(id)) {
				pojo.setLastTime(dateTime);
				result = cMeetingOrderMapper.updateByPrimaryKeySelective(pojo);
			} else {
				String uuid = UUID.randomUUID().toString().replaceAll("-", "");
				pojo.setAddTime(dateTime);
				pojo.setLastTime(dateTime);
//				pojo.setOrderDeptId(pojo.getOrderDeptId().substring(0, pojo.getOrderDeptId().length() - 1));
				if (pojo.getAuditType().equals("auto")) {
					pojo.setMeetingStep("3");
				} else {
					pojo.setMeetingStep("1");
				}
				pojo.setId(uuid);				
				String[] participant = pojo.getState().split(",");
				pojo.setState("T");
				result = cMeetingOrderMapper.insertSelective(pojo);
				for (int i = 0; i < participant.length; i++) {
					CMeetingUser pojo1 = new CMeetingUser();
					pojo1.setMeeting(pojo.getId());
					pojo1.setUser(participant[i]);
					cMeetingUserMapper.insertSelective(pojo1);
				}
				
				
				// 往审核表里插入数据
				/*
				 * CMeetingVerify pojo1=new CMeetingVerify(); pojo1.setMeetingId(uuid);
				 * pojo1.setState("W"); pojo1.setAddTime(dateTime); pojo1.setLastTime(dateTime);
				 * result = cMeetingVerifyMapper.insertSelective(pojo1);
				 */
				if (pojo.getAuditType().equals("auto")) {// 自动审核，开始推送

				}
			}
			if (result == 0) {
				jsonResult.setResult(Constants.OPERATION_FAIL);
			}
		}
		return jsonResult;
	}

	@CacheClear
	public JsonResult update(CMeetingOrder pojo) throws Exception {
		JsonResult jsonResult = new JsonResult();
		Date dateTime = DateTimeUtil.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss");
		pojo.setLastTime(dateTime);
		int result = cMeetingOrderMapper.updateByPrimaryKeySelective(pojo);
		if (result == 0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
		}
		return jsonResult;
	}

	@CacheClear
	public JsonResult qx(String id) throws Exception {
		JsonResult jsonResult = new JsonResult();
		int result = 0;
		result = cMeetingOrderMapper.qx(id);
		if (result == 0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
		}
		return jsonResult;
	}

	@CacheClear
	public JsonResult del(String id) throws Exception {
		JsonResult jsonResult = new JsonResult();
		int result = 0;
		if (StringUtils.contains(id, ",")) {
			String[] idsArr = id.split(",");
			if (idsArr.length > 0) {
				for (String idArr : idsArr) {
					result = cMeetingOrderMapper.deleteByPrimaryKey(idArr);
					if (result == 0) {
						break;
					}
				}
			}
		} else {
			result = cMeetingOrderMapper.deleteByPrimaryKey(id);
		}
		if (result == 0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
		}
		return jsonResult;
	}

	@Cache
	public JsonResult findCdeviceCmeetingOrder(String dataTime, String deviceId) throws Exception {
		JsonResult jsonResult = new JsonResult();
		Map<String, Object> map = cMeetingOrderMapper.findCdeviceCmeetingOrder(dataTime, deviceId);
		if (map != null) {
			// 获取会议的开始结束时间
			String timeStart = (String) map.get("timeStart");
			String timeEnd = (String) map.get("timeEnd");
			if (!StringUtils.isEmpty(timeStart) && !StringUtils.isEmpty(timeEnd)) {
				// 获取当前系统时间
				long CurrDateTime = DateTimeUtil
						.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss").getTime();
				// 时间格式解析
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				long starTtime = dateFormat.parse(timeStart).getTime();
				long endTtime = dateFormat.parse(timeEnd).getTime();
				// 当前时间和会议时间比较
				if (CurrDateTime < starTtime) {
					map.put("meetingState", "会议未开始");
				} else if (CurrDateTime > endTtime) {
					map.put("meetingState", "会议已结束");
				} else {
					map.put("meetingState", "会议进行中");
				}
			}
			jsonResult.setData(map);
		}
		return jsonResult;
	}

	@Cache
	public JsonListResult cdeviceCplaceCmeetingOrder(Map<String, Object> map) throws Exception {

		// 根据设备id 获取会议内容
		List<Map<String, Object>> list = cMeetingOrderMapper.cdeviceCplaceCmeetingOrderHDPage(map);
		JsonListResult jsonListResult = null;
		if (!list.isEmpty()) {
			//获得迭代器
			ListIterator<Map<String,Object>> listIterator = list.listIterator();
			while(listIterator.hasNext()) {
				Map<String, Object> meet = listIterator.next();
				// 获取会议的开始结束时间
				String timeStart = (String) meet.get("dataTime");
				String timeEnd = (String) meet.get("dataTimeEnd");
				// 获取当前系统时间
				long CurrDateTime = DateTimeUtil
						.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss").getTime();
				// 时间格式解析
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				long starTtime = dateFormat.parse(timeStart).getTime();
				long endTtime = dateFormat.parse(timeEnd).getTime();
				// 当前时间和会议时间比较
				if (CurrDateTime < starTtime) {
					meet.put("meetingState", "会议未开始");
				} else if (CurrDateTime > starTtime && CurrDateTime < endTtime) {
					meet.put("meetingState", "会议进行中");
				}else {
					listIterator.remove();
					continue;
				}
				String dataTime = (String) meet.get("dataTime");
				String subDataTime = StringUtils.substring(dataTime, 0, 10);
				meet.put("dataTime", subDataTime);
			}
			// 遍历集合 判断开始结束时间
			
			/*for (Map<String, Object> meet : list) {
				// 获取会议的开始结束时间
				String timeStart = (String) meet.get("dataTime");
				String timeEnd = (String) meet.get("dataTimeEnd");
				// 获取当前系统时间
				long CurrDateTime = DateTimeUtil
						.getFormatDateTime(DateTimeUtil.getCurrDateTimeStr(), "yyyy-MM-dd HH:mm:ss").getTime();
				// 时间格式解析
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				long starTtime = dateFormat.parse(timeStart).getTime();
				long endTtime = dateFormat.parse(timeEnd).getTime();
				// 当前时间和会议时间比较
				if (CurrDateTime < starTtime) {
					meet.put("meetingState", "会议未开始");
				} else if (CurrDateTime > starTtime && CurrDateTime < endTtime) {
					meet.put("meetingState", "会议进行中");
				}else {
					list.remove(meet);
					continue;
				}
				String dataTime = (String) meet.get("dataTime");
				String subDataTime = StringUtils.substring(dataTime, 0, 10);
				meet.put("dataTime", subDataTime);
			} */
			EntyPage page = (EntyPage) map.get("page");
			jsonListResult = new JsonListResult(page, list);

		}else {
			jsonListResult.setList(list);
			jsonListResult.setResult(Constants.OPERATION_FAIL);
		}
		
		return jsonListResult;
	}

	@CacheClear
	public JsonResult updateByState(String id) throws Exception {
		JsonResult jsonResult = new JsonResult();
		CMeetingOrder cMeetingOrder = new CMeetingOrder();
		cMeetingOrder.setId(id);
		cMeetingOrder.setState("E");
		int flag = cMeetingOrderMapper.updateByPrimaryKeySelective(cMeetingOrder);
		if (flag == 0) {
			jsonResult.setResult(Constants.OPERATION_FAIL);
			jsonResult.setMessage("操作失败!");
			return jsonResult;
		}
		jsonResult.setMessage("操作成功!");
		return jsonResult;

	}
    /**
     * 当前人员的会议提醒
     */
    @Cache
    public List<Map<String,Object>> findhytx(String userid,String sj){
    	List<Map<String,Object>> list = cMeetingOrderMapper.findhytx(userid,sj);
		return list;
    }
    /**
     * 当前人员的待办事项
     */
    @Cache
    public List<Map<String,Object>> finddbsx(String userid){
    	List<Map<String,Object>> list = cMeetingOrderMapper.finddbsx(userid);
		return list;
    }
}