<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/task 
       http://www.springframework.org/schema/task/spring-task.xsd">

	<!-- redis连接池 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<!-- 连接池配置，类似数据库连接池 -->
	<!--<bean id="jedisConnectionFactory"
		  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"/>
		<property name="port" value="${redis.port}"/>
	   <property name="password" value="${redis.pass}"></property>
		<property name="poolConfig" ref="poolConfig"/>
	</bean>  -->

	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="poolConfig" ref="poolConfig"/>
		<constructor-arg name="host" value="${redis.host}" />
		<constructor-arg name="port" value="${redis.port}" />
	</bean>

	<!--redis操作模版,使用该对象可以操作redis  -->
<!--	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！
		<property name="keySerializer" >
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer" >
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
		</property>

		<property name="enableTransactionSupport" value="true"></property>
	</bean >-->

	<!-- cglib代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!--配置切面拦截方法 -->
	<!--<bean id="cacheAOP" class="com.cf.util.CacheAOP"/>

	<aop:config>
		<aop:aspect ref="cacheAOP">
			<aop:pointcut id="dataSourcePointcut" expression="execution(* *..service..*Service.*Cache*(..))"/>
			<aop:before pointcut-ref="dataSourcePointcut" method="doBefore"/>
		</aop:aspect>
	</aop:config>-->
	<task:annotation-driven/>
	<bean id="wjsc" class="com.cf.task.wjsc">

	</bean>
	<task:scheduled-tasks>
        <task:scheduled ref="wjsc" method="wjsc" cron="0 15 17 * * ?"/>
    </task:scheduled-tasks>
    
</beans>